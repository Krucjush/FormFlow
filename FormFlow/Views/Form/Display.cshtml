@using FormFlow.Models.Enums
@model FormFlow.Models.ViewModels.FormDisplayViewModel

@{
    ViewData["Title"] = "Display Form";
}

<h2>@Model.Title</h2>

@if (!string.IsNullOrEmpty(ViewData["ErrorMessage"] as string))
{
    <div class="row">
        <div class="col-12">
            <div class="alert alert-danger" role="alert">
                @ViewData["ErrorMessage"]
            </div>
        </div>
    </div>
}

<h3>Questions:</h3>
@if (Model.Questions!.Count > 0)
{
    <form method="post" asp-action="SubmitResponse" asp-route-formId="@Model.FormId">
        @foreach (var question in Model.Questions)
        {
            <div @if (question.Required)
            {
                @:class="required-question"
            }>
                <h4>@question.Text @if (question.Required)
                    {
                        <span>*</span>
                    }</h4>
                @switch (question.Type)
                {
                    case QuestionType.Mark:
                        {
                            for (var i = 1; i < 11; i++)
                            {
                                <div style="display: inline-block; margin-right: 20px;">
                                    <span style="display: block; text-align: center;">@i</span>
                                    <input type="radio" name="question_@(question.Id)" value="@i" id="radio_@(i)" />
                                </div>
                            }
                            break;
                        }
                    case QuestionType.MultipleOptions:
                        {
                            foreach (var option in question.Options!)
                            {
                                <input type="radio" name="question_@(question.Id)" value="@option.Text" id="@option.Id" />
                                <label for="@option.Id">@option.Text</label>
                                <br />
                            }
                            break;
                        }
                    case QuestionType.Open:
                        {
                            <textarea name="question_@(question.Id)" rows="3" cols="40"></textarea>
                        }
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </div>
        }
        <button type="submit">Submit</button>
    </form>
    <p>`*` marks required questions</p>
}
else
{
    <p>No questions found.</p>
}
@section Scripts {
    <script>
        $(document).ready(function () {
            $("form").submit(function (event) {
                var isValid = true;

                $(".required-question").each(function () {
                    if ($(this).find(":input").val() === "") {
                        isValid = false;
                        $(this).addClass("error");
                    } else {
                        $(this).removeClass("error");
                    }
                });

                if (!isValid) {
                    event.preventDefault();
                    // Display an error message or handle it as needed
                    alert("Please answer all required questions.");
                }
            });
        });
    </script>
}